//Node.jsのモジュールのインポート
const crypto = require('crypto');   

//ハッシュ化する対象のパスワード
const password = 'myPassword123';

//ランダムなソルト値を生成、ハッシュ値と組み合わせて計算に使用
const salt = crypto.randomBytes(16); 

//イテレーション回数（注意①→ソース最後尾コメントアウトブロックを参照）はハッシュ関数を反復する回数を指定、高い値を設定するほど計算コストが増加
// →コストパラメータを増やすことでハッシュ計算に要する時間やリソースが増え、攻撃者による総当たり攻撃や高性能なハードウェアによる攻撃を困難にすることができる
const iterations = 100000; // イテレーション回数
const keyLength = 64; // キーの長さ

//pbkdf2関数：指定されたパスワードとソルトを使用して、指定されたイテレーション回数とキーの長さに基づいてハッシュ化をする
//第三引数：sha-512は512bitの播種を生成するハッシュ関数のアルゴリズムの指定
// PBKDF2=Password-Based Key Derivation Function 2 アルゴリズム
crypto.pbkdf2(password, salt, iterations, keyLength, 'sha512', (err, derivedKey) => {
  if (err) throw err;

  const hashedPassword = derivedKey.toString('hex');
  console.log('ハッシュ化されたパスワード:', hashedPassword);
  console.log('使用されたソルト:', salt.toString('hex'));
});

//ハッシュ関数のアルゴリズム：入力データから一定の長さの固定長のデータ（ハッシュ値）を生成する計算手法。
// 入力に対して予測不可能な出力を生成することが求められる
// 入力例："Hello"
// 文字列 "Hello" の各文字のUnicode値を取得します。
// H: 72, e: 101, l: 108, l: 108, o: 111
// Unicode値を足し合わせます。
// 72 + 101 + 108 + 108 + 111 = 500
// ハッシュ値として得られた結果を出力します。
// ハッシュ値: 500
// 補足）Unicode値：文字や記号に対応する一意の数値、Unicodeは世界中のほぼすべての文字を表現するための国際的な文字コード規格

// セキュリティの向上→ソルトを使用、パスワードの保存などの用途では単純なハッシュ関数では十分なセキュリティを提供できない
// パスワードはハッシュ関数を使用する際にはソルトを使用することが重要
// ソルトはランダムなデータで在り、パスワードと組み合わせてハッシュ値を計算するため、パスワードの総当たり攻撃やレインボーテーブル攻撃などの一部の攻撃手法に対して追加のセキュリティを提供する
//これに関しては同ディレクトリ内のhash.javaを参照。


// 以下、イテレーションとストレッチングの区別についての補足説明
// イテレーションとストレッチングは、一般的なコンテキストでは異なる意味を持ちます。

// イテレーション（Iteration）は、反復を意味します。プログラミングの文脈では、ループや反復処理のことを指すことが一般的です。イテレーションは、同じ処理を複数回繰り返すことで、特定の目的を達成するために使用されます。

// 一方、ストレッチング（Stretching）は、パスワードなどの機密情報を保護するための手法です。ストレッチングでは、ハッシュ関数を複数回繰り返し適用することで計算コストを増加させ、総当たり攻撃や辞書攻撃などの攻撃を困難にします。ストレッチングは、セキュリティの目的で計算コストを高めるための手法であり、一般的にはハッシュ関数の反復適用によって実現されます。

// つまり、イテレーションはプログラミングの概念であり、反復処理を指す言葉です。一方、ストレッチングはセキュリティの手法であり、ハッシュ関数の反復適用によって計算コストを増加させる手法を指します。

// ただし、文脈によっては、ストレッチングの手法を「イテレーション方式のストレッチング」と表現することもあります。この場合、ストレッチングの過程でハッシュ関数を複数回繰り返すことを指しています。ですので、厳密な意味での同義ではありませんが、ストレッチングにおいてイテレーションが行われるという意味で使用されることがあります。